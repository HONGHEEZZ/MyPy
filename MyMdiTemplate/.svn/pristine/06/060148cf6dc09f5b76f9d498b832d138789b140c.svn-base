from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5 import uic

import PyQt5.QtGui



import time
import random
from datetime import datetime
import sqlite3

from collections import OrderedDict

#영어회화 100일의 기적 2 : https://www.youtube.com/user/muncoach/videos

'''
* 파이썬 ui 참고 자료 - wikidoc
- PyQt5 Tutorial - 파이썬으로 만드는 나만의 GUI 프로그램
- 초보자를 위한 Python GUI 프로그래밍 - PyQt5
- python_ Cheat Sheet
'''


# 책 https://English.net/book/1
# 책 - 챕터 https://English.net/2
g_url = 'https://English.net'



my_dlg = uic.loadUiType("./ui/MyEnglish.ui")[0]


con = sqlite3.connect("./English.db")

all_book_lists = []


class CMyEnglish(QDialog, my_dlg):
    def __init__(self, parent=None):
        print("parent:", parent)
        super().__init__(parent)
        self.setupUi(self)
        # loadUi("test2",self)

        self.book_id = -1
        self.chapter_id = -1

        # edit과 라벨을 리스트로 담아서 처리...
        self.widget_list_edit = []
        self.widget_list_label = []

        #* 콘트롤을 배열로 관리.
        self.f_make_widget_array()

        self.contentsDict = OrderedDict()

        # 실패 횟수
        self.fail_count = 0


        self.btnStart.clicked.connect(self.btnStart_Click)
        self.cboBooks.currentIndexChanged.connect(self.cboBooks_IndexChanged)
        self.lstChapters.currentItemChanged.connect(self.lstChpaters_currentItemChanged)

        self.txtMyAnswer_1.returnPressed.connect(self.txtMyAnswer_1_returnPressed)
        self.txtMyAnswer_2.returnPressed.connect(self.txtMyAnswer_2_returnPressed)
        self.txtMyAnswer_3.returnPressed.connect(self.txtMyAnswer_3_returnPressed)
        self.txtMyAnswer_4.returnPressed.connect(self.txtMyAnswer_4_returnPressed)
        self.txtMyAnswer_5.returnPressed.connect(self.txtMyAnswer_5_returnPressed)
        self.txtMyAnswer_6.returnPressed.connect(self.txtMyAnswer_6_returnPressed)

        self.initUI()

        self.optModeSave.setChecked(True)



    def f_make_widget_array(self):
        self.widget_list_edit.append(self.txtMyAnswer_1)
        self.widget_list_edit.append(self.txtMyAnswer_2)
        self.widget_list_edit.append(self.txtMyAnswer_3)
        self.widget_list_edit.append(self.txtMyAnswer_4)
        self.widget_list_edit.append(self.txtMyAnswer_5)
        self.widget_list_edit.append(self.txtMyAnswer_6)

        self.widget_list_label.append(self.lblResult_1)
        self.widget_list_label.append(self.lblResult_2)
        self.widget_list_label.append(self.lblResult_3)
        self.widget_list_label.append(self.lblResult_4)
        self.widget_list_label.append(self.lblResult_5)
        self.widget_list_label.append(self.lblResult_6)

    def txtMyAnswer_1_returnPressed(self):
        self.f_check_answer(1, self.txtMyAnswer_1, self.lblResult_1)

    def txtMyAnswer_2_returnPressed(self):
        self.f_check_answer(2, self.txtMyAnswer_2, self.lblResult_2)


    def txtMyAnswer_3_returnPressed(self):
        self.f_check_answer(3, self.txtMyAnswer_3, self.lblResult_3)

    def txtMyAnswer_4_returnPressed(self):
        self.f_check_answer(4, self.txtMyAnswer_4, self.lblResult_4)

    def txtMyAnswer_5_returnPressed(self):
        self.f_check_answer(5, self.txtMyAnswer_5, self.lblResult_5)

    def txtMyAnswer_6_returnPressed(self):
        self.f_check_answer(6, self.txtMyAnswer_6, self.lblResult_6)



    # 챕터 리스트 선택 변경
    def lstChpaters_currentItemChanged(self):

        # 1. 현재 선택된 book_id 가져오기
        self.book_id = self.cboBooks.itemData(self.cboBooks.currentIndex())

        # 2. 선택된 챕터 정보 가져오기
        curIndex = self.lstChapters.currentRow()

        #------------------------------------------------------------------------------
        # 챕터 id / 챕터 명
        # ------------------------------------------------------------------------------
        self.chapter_id = curIndex + 1 # db는 1 base

        item = self.lstChapters.currentItem()
        self.chapter_name = item.text()


        self.f_get_contents(self.book_id, self.chapter_id)

        # 3. 대답영역 초기화...
        self.f_init_answer_frame()

        # 4. 첫번째 에디트에 포커스
        self.f_ready_next(self.widget_list_edit[0], self.widget_list_label[0])


        #------------------------------------------------------------------------------
        #* 챕터 id/ 챕터 명
        # ------------------------------------------------------------------------------
        self.txtChapterId.setText(str(self.chapter_id))
        self.txtChapterName.setText(self.chapter_name)


    def f_init_answer_frame(self):

        for edit in self.widget_list_edit:
            edit.setText("")

        for label in self.widget_list_label:
            label.setText("")




    def f_save_chapter(self, book_id, chapter_id, chapter_name):
        sql = "delete from book_chapters where book_id = ? and chapter_id = ?"
        con.execute(sql, (book_id, chapter_id))

        sql = """
                insert into book_chapters (book_id, chapter_id, ord, 
                                           chapter_div, chapter_nm, use_yn )
                values(?, ?, ?, ?, ?, ?)                             
        """

        #Day 001. 봄꽃나들이
        chapter_div = chapter_name[:7].strip()        #Day 001
        chapter_nm = chapter_name[8:].strip()         #봄꽃나들이


        con.execute(sql, (book_id, chapter_id, chapter_id,
                          chapter_div, chapter_nm, 'Y'))


    def f_save_contents(self, lblWidget, txtWidget, book_id, chapter_id, contents_id):

        sql = "delete from book_contents where book_id = ? and chapter_id = ? and contents_id = ?"
        con.execute(sql, (book_id, chapter_id, contents_id))


        sql = """
                        insert into book_contents (book_id, chapter_id, contents_id, ord, 
                                                   contents_1, contents_2)
                        values(?, ?, ?, ?, ?, ?)                             
                """

        # Day 001. 봄꽃나들이
        contents_1 = lblWidget.text()
        contents_2 = txtWidget.text()

        con.execute(sql, (book_id, chapter_id, contents_id, contents_id,
                          contents_1, contents_2))


    def f_save(self):
        book_id = self.txtBookId.text()
        chapter_id = self.txtChapterId.text()
        chapter_name = self.txtChapterName.text()

        self.f_save_chapter(book_id, chapter_id, chapter_name)

        self.f_save_contents(self.lblSpeaker_1, self.txtMyAnswer_1, book_id, chapter_id, 1)
        self.f_save_contents(self.lblSpeaker_2, self.txtMyAnswer_2, book_id, chapter_id, 2)
        self.f_save_contents(self.lblSpeaker_3, self.txtMyAnswer_3, book_id, chapter_id, 3)
        self.f_save_contents(self.lblSpeaker_4, self.txtMyAnswer_4, book_id, chapter_id, 4)
        self.f_save_contents(self.lblSpeaker_5, self.txtMyAnswer_5, book_id, chapter_id, 5)
        self.f_save_contents(self.lblSpeaker_6, self.txtMyAnswer_6, book_id, chapter_id, 6)

        con.commit()

        QMessageBox.information(self, '성공', "정상 저장되었습니다.", QMessageBox.Yes)



    def f_clear_txtWdiget(self):
        for txt in self.widget_list_edit:
            txt.clear()

    #정답 비교, index 1 base
    def f_check_answer(self, index, txtMyAnswer, lblResult):


        #저장모드인 경우 저장한다.
        if self.optModeSave.isChecked():

            #index가 6인 경우 저장
            if index >= 6:
                if QMessageBox.Yes == QMessageBox.information(self, '저장', "저장하시겠습니까?", QMessageBox.Yes | QMessageBox.No):
                    self.f_save()

                    # 내용 텍스트 박스 클리어
                    self.f_clear_txtWdiget()

                    # 챕터 텍스트 박스 클리어
                    self.txtChapterId.clear()
                    self.txtChapterName.clear()

                    # 챕터 id set focus
                    self.txtChapterId.setFocus()

            else:

                self.widget_list_edit[index].setFocus()

            return


        #1. 내 답 대문자, 공백제거
        str = txtMyAnswer.text()
        strMyAnswer = self.f_convert_for_comp(str)

        #2. 정답 가져오기
        (strPrefix, strText) = list(self.contentsDict.values())[:index][-1]

        #3. 정답  대문자, 공백제거
        strBookAnswer = self.f_convert_for_comp(strText)

        #4. 정답비교
        if strMyAnswer == strBookAnswer:

            # 1. 정답처리
            lblResult.setText("정답")

            # edit과 라벨을 리스트로 담아서 처리...
            if index < len(self.contentsDict):
                # index가 one base이므로 걍 index 해서 넣어주면 된다.
                self.f_ready_next(self.widget_list_edit[index], self.widget_list_label[index])
            else:
                QMessageBox.information(self, '성공', "이번 챕터 성공입니다. 다음 챕터로 넘어갑니다.", QMessageBox.Yes)
                curIndex = self.lstChapters.currentRow()
                item = self.lstChapters.item(curIndex)
                item.setForeground(PyQt5.QtGui.QColor('gray'))

                item = self.f_next_chapter()
                if item == None:
                    QMessageBox.information(self, '축하', "축하해요. 모든 챕터를 성공했어요~~~~", QMessageBox.Yes)
                else:
                    self.lstChapters.setCurrentItem(item)


        else:
            lblResult.setText("오답")

            if self.fail_count >= 3:
                msg = "틀렸습니다.... 정답은 [" + strText + "] 입니다."
                QMessageBox.critical(self, '정답 제공', msg, QMessageBox.Yes)

                self.fail_count = 0
            else:
                QMessageBox.critical(self, '오답', "틀렸습니다.... 다시 도전하시겠습니까?", QMessageBox.Yes)
                lblResult.setText("☜")
                self.fail_count += 1


    #다음 문장 입력 대기
    def f_ready_next(self, edit_next, label_next):

        edit_next.setText("")
        edit_next.setFocus()

        label_next.setText("☜")


    #정답 비교용. 공백제거 대문자
    def f_convert_for_comp(self, str):
        strReturn = str
        strReturn = strReturn.strip()
        strReturn = strReturn.upper()
        strReturn = strReturn.replace(' ', '')

        return strReturn


    def cboBooks_IndexChanged(self):
        strBook = self.cboBooks.currentText()

        # 1. 현재 선택된 book_id 가져오기
        self.book_name = self.cboBooks.currentText()
        self.book_id = self.cboBooks.itemData(self.cboBooks.currentIndex())
        self.f_add_book_chapters_to_list(self.book_id)


        self.lblBookName.setText(self.book_name)
        self.txtBookId.setText(str(self.book_id))

    def btnStart_Click(self):

        cnt = self.lstChapters.count()
        if cnt == 0:
            QMessageBox.critical(self, '데이터 확인', "리스트가 비었습니다. 시작할 수 없습니다.", QMessageBox.Yes)
            return


        #다음 챕터 가져오기
        self.f_next_chapter()

    # 다음 챕터 가져오기
    def f_next_chapter(self):
        
        # 안한 챕터가 있는지 확인
        list_cnt = self.lstChapters.count()

        # gray 개수 count 하기....
        gray_cnt = 0
        for i in range(list_cnt):
            item = self.lstChapters.item(i)
            color = item.foreground()

            # 회색 카운트 증가
            if color == PyQt5.QtGui.QColor('gray'):
                gray_cnt += 1

        # 회색이 리스트 카운트보다 많으면 모두 처리한 것임....
        if gray_cnt >= list_cnt:
            return None

        if self.optDirection_1.isChecked(): #정방향
            item = self.f_next_chapter_forward()
            return item
        elif self.optDirection_2.isChecked():  # 역방향
            pass
        elif self.optDirection_3.isChecked():
            item = self.f_next_chapter_random()
            return item

    # 역방향
    def f_next_chapter_backward(self):
        curIndex = self.lstChapters.currentRow()

        nowIndex = curIndex

        while True:
            nowIndex -= 1

            #  index가 -1이면 종료
            if nowIndex < 0:
                return None

            item = self.lstChapters.item(nowIndex)
            color = item.foreground()

            # 회색이면 continue
            if color == PyQt5.QtGui.QColor('gray'):
                continue

            # 회색이 아니다. 다음 아이템 선택
            item = self.lstChapters.item(nowIndex)
            # self.lstChapters.setCurrentItem(item)

            return item

    #정방향
    def f_next_chapter_forward(self):
        curIndex = self.lstChapters.currentRow()

        nowIndex = curIndex

        while True:
            nowIndex += 1

            #마지막 아이템이면 종료
            if nowIndex >= self.lstChapters.count():
                return None

            item = self.lstChapters.item(nowIndex)
            color = item.foreground()

            # 회색이면 continue
            if color == PyQt5.QtGui.QColor('gray'):
                continue

            # 회색이 아니다. 다음 아이템 선택
            item = self.lstChapters.item(nowIndex)
            #self.lstChapters.setCurrentItem(item)

            return item


    #random
    def f_next_chapter_random(self):

        list_cnt = self.lstChapters.count()

        # 안한 챕터 찾기
        while True:
            index = random.randrange(0, list_cnt)

            item = self.lstChapters.item(index)
            color = item.foreground()

            # 처리 안한 item만 뽑기...
            if color != PyQt5.QtGui.QColor('gray'):
                item = self.lstChapters.item(index)
                #self.lstChapters.setCurrentItem(item)

                return item


    def initUI(self):
        self.setWindowTitle('MyEnglish')

        self.f_add_books_to_combo()

    # 리스트에 챕터 추가
    def f_get_contents(self, book_id, chapter_id):

        self.contentsDict.clear()

        # 1. db에서 읽어온다.
        cursor = con.cursor()
        sql = """
                select contents_id, contents_1, contents_2
                  from book_contents
                where 1=1
                  and book_id = ?
                  and chapter_id = ?
                order by ord
                """
        cursor.execute(sql, (book_id, chapter_id))

        for row in cursor.fetchall():
            book_id = row[0]
            contents_1 = row[1]
            contents_2 = row[2]

            self.contentsDict[book_id] = [contents_1, contents_2]

        cursor.close()

        return self.contentsDict

    #리스트에 챕터 추가
    def f_add_book_chapters_to_list(self, book_id):
        self.lstChapters.clear()

        # 1. db에서 읽어온다.
        cursor = con.cursor()
        sql = """
                select chapter_div || '. ' || chapter_nm as chapter
                  from book_chapters
                where use_yn = ?
                  and book_id = ?
                order by ord
                """
        cursor.execute(sql, ('Y', book_id))


        for row in cursor.fetchall():
            item = QListWidgetItem(row[0])
            self.lstChapters.addItem(item)

        row_cnt = len(self.lstChapters)
        if row_cnt > 0 :
            item = self.lstChapters.item(0)
            self.lstChapters.setCurrentItem(item)

        cursor.close()

    def f_add_books_to_combo(self):
        # 1. db에서 읽어온다.
        cursor = con.cursor()
        sql = """
                select book_id, book_name
                  from books
                where use_yn = ?
                order by ord
                """
        cursor.execute(sql, ('Y',))


        index = 0
        for row in cursor.fetchall():
            self.cboBooks.addItem(row[1])
            self.cboBooks.setItemData(index, row[0]) #book_id를 itemData에 저장

            index += 1

        self.cboBooks.setCurrentIndex(-1)
        self.cboBooks.setCurrentIndex(0)
        cursor.close()

if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    ex = CMyEnglish()
    ex.show()
    sys.exit(app.exec_())

